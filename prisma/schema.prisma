// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String   @id @default(uuid())
  facebookId      String   @unique
  name            String
  email           String?
  accessToken     String
  pageId          String
  pageAccessToken String
  igUserId        String
  aiTone          String?
  accountType     String? 
  customAccountType String?
  audienceStyle   String? 
  createdAt       DateTime @default(now())

  triggers        Trigger[]
  interactions    Interaction[]
  blasts          Blast[]
}

model Interaction {
  id          String   @id @default(uuid())
  userId      String
  source      String   // 'simulation' | 'webhook' | 'manual'
  type        String   // 'dm' | 'comment' | 'reaction'
  text        String
  classification String?
  aiResponse  String?
  isAiGenerated Boolean @default(false)
  createdAt   DateTime @default(now())

  user        User     @relation(fields: [userId], references: [id])
  blastTargets BlastTarget[]
}


model Trigger {
  id            String   @id @default(uuid())
  userId        String
  type          String   // 'comment' | 'dm' | 'reaction'
  keyword       String
  responseType  String   // 'static' | 'ai'
  responseText  String? 
  responsePublic String? 
  active        Boolean  @default(true)
  createdAt     DateTime @default(now())

  user          User     @relation(fields: [userId], references: [id])
}


model Blast {
  id          String   @id @default(uuid())
  userId      String
  message     String
  scheduledAt DateTime
  createdAt   DateTime @default(now())

  user        User     @relation(fields: [userId], references: [id])
  targets     BlastTarget[]
}

model BlastTarget {
  id            String   @id @default(uuid())
  blastId       String
  interactionId String
  status        String   // 'pending' | 'sent' | 'failed'
  createdAt     DateTime @default(now())

  blast         Blast     @relation(fields: [blastId], references: [id])
  interaction   Interaction @relation(fields: [interactionId], references: [id])
}


